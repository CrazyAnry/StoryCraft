generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int      @id @default(autoincrement())
  username    String   @unique
  email       String   @unique
  password    String
  role        Role     @default(reader)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isVerified  Boolean  @default(false)
  displayName String?
  bio         String?
  avatarUrl   String?

  followedUsers  User[] @relation("UserFollows")
  followingUsers User[] @relation("UserFollows")

  favoriteStories Story[] @relation("UserFavoriteStories")
  stories         Story[]

  settings UserSettings?
}

model Story {
  id        Int      @id @default(autoincrement())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isPublic  Boolean  @default(false)

  authorId Int  @unique
  author   User @relation(fields: [authorId], references: [id])

  isFavoriteBy User[] @relation("UserFavoriteStories")

  scenes  Scene[]
  choices Choice[]
}

model Scene {
  id          Int     @id @default(autoincrement())
  title       String
  image       String?
  isEnd       Boolean @default(false)
  description String

  storyId Int
  Story   Story @relation(fields: [storyId], references: [id])

  choices Choice[]
}

model Choice {
  id        Int     @id @default(autoincrement())
  text      String
  nextScene Int
  access    Boolean @default(true)

  sceneId Int?
  Scene   Scene? @relation(fields: [sceneId], references: [id])

  storyId Int
  Story   Story @relation(fields: [storyId], references: [id])
}

enum Role {
  admin
  moderator
  reader
}

model UserSettings {
  id        Int     @id @default(autoincrement())
  theme     String  @default("dark")
  language  String  @default("en")
  user      User    @relation(fields: [userId], references: [id])
  userId    Int     @unique
}