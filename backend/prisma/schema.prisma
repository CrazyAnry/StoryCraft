generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int      @id @default(autoincrement())
  username        String   @unique
  email           String   @unique
  role            Role
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  isVerified      Boolean  @default(false)
  displayName     String?
  bio             String?
  avatarUrl       String?
  favoriteStories Story[] @default([])
  followedUsers   User[] @default([])
  followingUsers  User[] @default([])

  publishedStories Story[]       @relation("publishedBy")
  savedStories     Story[]       @relation("savedBy")
  
  settings         UserSettings
}

model Story {
  id        Int      @id @default(autoincrement())
  title     String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
  scenes    Scene[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  publishedBy   User? @relation("publishedBy", fields: [publishedById], references: [id])
  publishedById Int?

  savedBy User[] @relation("savedBy")
}

model Scene {
  id          Int      @id @default(autoincrement())
  title       String
  image       String?
  isEnd       Boolean  @default(false)
  description String
  choices     Choice[]
  Story       Story?   @relation(fields: [storyId], references: [id])
  storyId     Int?
}

model Choice {
  id        Int     @id @default(autoincrement())
  text      String
  nextScene Int
  access    Boolean @default(true)
  Scene     Scene?  @relation(fields: [sceneId], references: [id])
  sceneId   Int?
}

enum Role {
  admin
  moderator
  reader
}

model UserSettings {
  theme    String  @default("dark")
  language String  @default("en")
  userId   Int     @unique
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}
