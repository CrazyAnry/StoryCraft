generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Story {
  id        Int      @id @default(autoincrement()) // Уникальный идентификатор
  title     String // Название истории
  author    String // Автор истории
  authorId  Int // Уникальный идентификатор автора
  scenes    Scene[] // Массив сцен
  createdAt DateTime @default(now()) // Дата создания
  updatedAt DateTime @updatedAt // Дата последнего обновления
}

model User {
  id              Int           @id @default(autoincrement())
  username        String        @unique
  email           String        @unique
  role            Role
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  isVerified      Boolean       @default(false)
  displayName     String?
  bio             String?
  avatarUrl       String?
  favoriteStories String[]      @default([])
  followedUsers   String[]      @default([])
  followingUsers  String[]      @default([])
  settings        UserSettings?
}

model Scene {
  id      Int      @id @default(autoincrement()) // Уникальный идентификатор
  title   String // Название сцены
  image   String? // Опциональная ссылка на изображение
  isEnd   Boolean  @default(false) // Конечная ли сцена
  choices Choice[] // Массив выборов
  Story   Story?   @relation(fields: [storyId], references: [id])
  storyId Int?
}

model Choice {
  id        Int     @id @default(autoincrement()) // Уникальный идентификатор
  text      String // Текст выбора
  nextScene Int // Ссылка на следующую сцену
  access    Boolean @default(true) // Доступен ли выбор
  Scene     Scene?  @relation(fields: [sceneId], references: [id])
  sceneId   Int?
}

// Перечисление для роли пользователя
enum Role {
  admin
  moderator
  reader
}

model UserSettings {
  id       Int     @id @default(autoincrement()) // Уникальный идентификатор для настроек
  theme    String  @default("dark") // Тема (по умолчанию dark)
  language String? // Язык (опционально)
  userId   Int     @unique // Уникальный идентификатор пользователя для связи с таблицей User
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade) // Связь с пользователем
}